function logSumm = extractFrameTimeByTrials(logSumm,ts,cfg)

% logSumm = extractFrameTimeByTrials(logSumm,ts)
% aligns behavioral events to imaging frames on a trial-by-trial basis.
% Both provides imaging frame equivalents for every virmen frame and bins
% behavioral events at imaging frame frame
% input/output logSumm is interpreted virmen log generated by
% summarizeVirmenLog_widefield.m, also function that calls this one


tic;
fprintf('\t\t\taligning virmen and imaging frames... ')

%% register clocks
camDtVirmen           = diff(logSumm.camDataIn);
tempt                 = logSumm.timeaxis(2:end);
logSumm.frameDtVirmen = mode(diff(tempt(camDtVirmen==1)));
if cfg.strobedLED; logSumm.frameDtVirmen = logSumm.frameDtVirmen*2; end
logSumm.frameDtCam    = mode(diff(ts));
logSumm.tRatio        = logSumm.frameDtVirmen/logSumm.frameDtCam;
logSumm               = rmfield(logSumm,'camDataIn');
logSumm               = rmfield(logSumm,'timeaxis');

if logSumm.tRatio > 1.002 || logSumm.tRatio < 0.998 % there is a data aliasing issue with high frame rates
  warning('sync values are off, proceeding with known values')
  camframet         = ts*1.0008+logSumm.camOnTime;
else
  camframet         = ts*logSumm.tRatio+logSumm.camOnTime;
end

%% register
for ii = 1:logSumm.ntrials
  
  if isnan(logSumm.time{ii})
    logSumm.camFrameNum{ii}       = nan;
    logSumm.binned.camFrameID{ii} = nan;
    logSumm.binned.time{ii}       = nan;
    logSumm.binned.keyFrames{ii}  = nan;
    logSumm.binned.pos{ii}        = nan;
    logSumm.binned.displ{ii}      = nan;
  else
    thist = logSumm.time{ii}+logSumm.startTime(ii);
    logSumm.displ{ii} = [0 0 0; logSumm.displ{ii}];
    
    % cam frame correspondence by virmen frame
    logSumm.camFrameNum{ii} = zeros(size(thist));
    for tt = 1:length(thist)
      logSumm.camFrameNum{ii}(tt) = find(camframet <= thist(tt),1,'last');
    end
    
    % bin behavioral variables by cam frame, save cam frame IDs per trial
    logSumm.binned.camFrameID{ii} = unique(logSumm.camFrameNum{ii});
    logSumm.binned.time{ii}       = camframet(logSumm.binned.camFrameID{ii})-camframet(logSumm.binned.camFrameID{ii}(1));
    if sum(logSumm.keyFrames{ii}==0)==0
      logSumm.binned.keyFrames{ii}  = logSumm.camFrameNum{ii}(logSumm.keyFrames{ii});
    else
      logSumm.binned.keyFrames{ii}  = zeros(size(logSumm.keyFrames{ii}));
      logSumm.binned.keyFrames{ii}(logSumm.keyFrames{ii}~=0) = logSumm.camFrameNum{ii}(logSumm.keyFrames{ii}(logSumm.keyFrames{ii}~=0));
      logSumm.binned.keyFrames{ii}(logSumm.keyFrames{ii}==0) = nan;
    end
    lastidx = find(logSumm.binned.time{ii}<logSumm.time{ii}(size(logSumm.pos{ii},1)),1,'last');
    for bb = 1:lastidx
      thisidx = find(logSumm.camFrameNum{ii}==logSumm.binned.camFrameID{ii}(bb));
      thisidx(thisidx>size(logSumm.pos{ii},1))=[];
      logSumm.binned.pos{ii}(bb,:)   = mean(logSumm.pos{ii}(thisidx,:),1);
      logSumm.binned.displ{ii}(bb,:) = mean(logSumm.displ{ii}(thisidx,:),1);
    end
  end
end

fprintf(' done after %1.1f sec\n',toc)